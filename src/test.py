""" from numpy.linalg import norm
import numpy as np

lijst = np.load("src/exercises/upperhand_bicep_curl_keypoints_focus.npy")
#print(lijst)

array = np.load("src\exercises\/upperhand_bicep_curl_delta.npy")
#print(array)

#lijst = np.save("src\exercises\exercises.npy", ["upperhand_bicep_curl"])

current = 1 
reps = 0

if reps != 0 and current != 0:
  print("o")
"""

"""
test = [1.6810077465050803, 1.5064242449611978, 1.8667882201194543, 1.4391076074610565, 1.8549723412358157, 0.8746641761349433]

l1 = [[0.20899138, 0.6303536,  0.8807696 ],
 [0.20452064, 0.4723857,  0.8635154 ],
 [0.23495993, 0.72030115, 0.8236131 ],
 [0.23105653, 0.37401748, 0.7809525 ],
 [0.16226305, 0.78995997, 0.742234  ],
 [0.1274724,  0.2905837,  0.73343134]]

output = array[1][5:11]

scores_current = [0] * 6

for coord in range(0, 6):

  # Determine score of current state
  scores_current[coord] = np.dot(l1[coord][:2], output[coord][:2]) / (norm(l1[coord][:2])*norm(output[coord][:2]))
  np.seterr(divide='ignore')
  scores_current[coord] = np.arctanh(scores_current[coord])

print(scores_current)

""" """

states = [[[0.2581912,  0.46951473, 0.5450448 ],
 [0.24687941, 0.48780477, 0.6504069 ],
 [0.24936806, 0.45180017, 0.4629336 ],
 [0.26097387, 0.5099523,  0.7950482 ],
 [0.26596317, 0.42443073, 0.77934927],
 [0.3237629,  0.56382406, 0.82127607],
 [0.32385463, 0.36649564, 0.8663597 ],
 [0.32896927, 0.70892704, 0.5030781 ],
 [0.3433771,  0.21841462, 0.5011853 ],
 [0.32607308, 0.80769056, 0.7690366 ],
 [0.34480038, 0.11312518, 0.57169443],
 [0.51126766, 0.5249244,  0.76108706],
 [0.51508325, 0.42826834, 0.8403245 ],
 [0.6767128,  0.5344335,  0.83538514],
 [0.6816772,  0.4509618,  0.7845269 ],
 [0.8257638,  0.5231982,  0.382878  ],
 [0.8280814,  0.45718354, 0.7633801 ]], [[0.25607944, 0.46800774, 0.43637687],
 [0.24598698, 0.4867374,  0.6831162 ],
 [0.24720481, 0.45005363, 0.662678  ],
 [0.26165822, 0.5084695,  0.75074905],
 [0.2648668,  0.42559832, 0.7155939 ],
 [0.33217594, 0.56359154, 0.737936  ],
 [0.32905462, 0.36689928, 0.556257  ],
 [0.331073,   0.69893014, 0.6351676 ],
 [0.33283055, 0.2385344,  0.7535206 ],
 [0.29154807, 0.77676386, 0.64377385],
 [0.26126787, 0.14179455, 0.66609097],
 [0.511396,   0.522241,   0.71135926],
 [0.5152992,  0.4228632,  0.692238  ],
 [0.68168736, 0.5276534,  0.73690504],
 [0.6857028,  0.44841108, 0.72792387],
 [0.82826287, 0.52019787, 0.33323148],
 [0.8272633,  0.4564896,  0.6764792 ]], [[0.26099148, 0.46978167, 0.42623293],
 [0.25289768, 0.48514456, 0.54114634],
 [0.25355214, 0.45333445, 0.622609  ],
 [0.26478338, 0.50779563, 0.72025514],
 [0.26873234, 0.425014,   0.66371447],
 [0.33157083, 0.5499362,  0.50485593],
 [0.333709,   0.38534203, 0.7041373 ],
 [0.32623813, 0.69644874, 0.66998136],
 [0.34802064, 0.2542233,  0.5958157 ],
 [0.25824568, 0.68768805, 0.5943126 ],
 [0.2822587,  0.2508734,  0.40473303],
 [0.5076922,  0.52091795, 0.72512275],
 [0.5128941,  0.43007812, 0.72764254],
 [0.6828838,  0.5257164,  0.7005913 ],
 [0.6870935,  0.4504108,  0.5762367 ],
 [0.8255488,  0.5217499,  0.3133784 ],
 [0.822458,   0.45655614, 0.62896633]], [[0.25607944, 0.46800774, 0.43637687],
 [0.24598698, 0.4867374,  0.6831162 ],
 [0.24720481, 0.45005363, 0.662678  ],
 [0.26165822, 0.5084695,  0.75074905],
 [0.2648668,  0.42559832, 0.7155939 ],
 [0.33217594, 0.56359154, 0.737936  ],
 [0.32905462, 0.36689928, 0.556257  ],
 [0.331073,   0.69893014, 0.6351676 ],
 [0.33283055, 0.2385344,  0.7535206 ],
 [0.29154807, 0.77676386, 0.64377385],
 [0.26126787, 0.14179455, 0.66609097],
 [0.511396,   0.522241,   0.71135926],
 [0.5152992,  0.4228632,  0.692238  ],
 [0.68168736, 0.5276534,  0.73690504],
 [0.6857028,  0.44841108, 0.72792387],
 [0.82826287, 0.52019787, 0.33323148],
 [0.8272633,  0.4564896,  0.6764792 ]]]

mctest = np.save("src\\exercises\\mctest_delta.npy", states)
print(np.load("src\\exercises\\mctest_delta.npy")) """


print(0.785 - 0.874)