import tensorflow as tf
import numpy as np
from models import movenet_model2 as mm2
from matplotlib import pyplot as plt
from numpy.linalg import norm

fr_0graden = [[0.42547175, 0.4861273 , 0.36412877],
       [0.42217952, 0.47484925, 0.35956025],
       [0.42338848, 0.4910192 , 0.29736868],
       [0.42916566, 0.45890477, 0.4835287 ],
       [0.42777932, 0.5178101 , 0.5461199 ],
       [0.46419972, 0.40586567, 0.43371397],
       [0.46145433, 0.5406748 , 0.48706785],
       [0.4764939 , 0.3599822 , 0.30073813],
       [0.47252017, 0.6200142 , 0.3638225 ],
       [0.46817923, 0.3709451 , 0.30767843],
       [0.46035656, 0.60213155, 0.3226062 ],
       [0.55948246, 0.42431352, 0.49069762],
       [0.5600467 , 0.5242334 , 0.52243406],
       [0.62659824, 0.4276847 , 0.5457316 ],
       [0.62169105, 0.5281274 , 0.39161295],
       [0.6992366 , 0.43517724, 0.39006683],
       [0.7020416 , 0.5385123 , 0.49296486]]
fr_30graden = [[0.43709433, 0.49212703, 0.3909963 ],
       [0.43275294, 0.4841948 , 0.4141657 ],
       [0.4351961 , 0.49533004, 0.37195754],
       [0.4383676 , 0.46042052, 0.47347787],
       [0.43758076, 0.5249137 , 0.51598096],
       [0.46104085, 0.40785033, 0.44931942],
       [0.46128005, 0.53893787, 0.539232  ],
       [0.45678473, 0.3240213 , 0.3114101 ],
       [0.44969225, 0.63465416, 0.29731473],
       [0.43448758, 0.20125414, 0.35606283],
       [0.44680497, 0.63530475, 0.40409836],
       [0.55174524, 0.41372925, 0.55704916],
       [0.55358297, 0.5228789 , 0.6537844 ],
       [0.6242438 , 0.4214813 , 0.5306207 ],
       [0.62578404, 0.5195143 , 0.39666843],
       [0.7083765 , 0.42886487, 0.39222178],
       [0.7072756 , 0.5179113 , 0.5499265 ]]
fr_60graden = [[0.4219889 , 0.460606  , 0.27541554],
       [0.42297852, 0.44754705, 0.32806283],
       [0.42082006, 0.4782856 , 0.20096187],
       [0.4249072 , 0.4309595 , 0.46709153],
       [0.42136806, 0.49399364, 0.40027052],
       [0.45264253, 0.39951354, 0.4153561 ],
       [0.44611   , 0.5264446 , 0.42058596],
       [0.4563356 , 0.30964437, 0.30392385],
       [0.4593382 , 0.57958263, 0.3812432 ],
       [0.4413583 , 0.2613711 , 0.33883855],
       [0.4545082 , 0.60318595, 0.35776162],
       [0.53641915, 0.41696072, 0.5348345 ],
       [0.53565025, 0.5103782 , 0.5444485 ],
       [0.60892737, 0.42569026, 0.5027416 ],
       [0.6133872 , 0.5245413 , 0.45551035],
       [0.70107675, 0.42610377, 0.45356908],
       [0.69802415, 0.5214258 , 0.5246661 ]]
fr_90graden = [[0.4348503 , 0.45771825, 0.29734004],
       [0.43430275, 0.4367221 , 0.27037883],
       [0.43630916, 0.4698945 , 0.2848319 ],
       [0.44109696, 0.41370544, 0.35117486],
       [0.43801826, 0.4843976 , 0.46452543],
       [0.47282428, 0.38278192, 0.47529483],
       [0.46611005, 0.4951701 , 0.44180882],
       [0.48224813, 0.352661  , 0.25072998],
       [0.47634265, 0.5367599 , 0.32450795],
       [0.45750946, 0.32534695, 0.308202  ],
       [0.45642662, 0.5524577 , 0.2151274 ],
       [0.5577384 , 0.4088051 , 0.37001893],
       [0.5587255 , 0.49529022, 0.35596848],
       [0.6257271 , 0.41939592, 0.5338739 ],
       [0.6250758 , 0.5185258 , 0.434238  ],
       [0.6991195 , 0.4233379 , 0.43714467],
       [0.70157576, 0.5160031 , 0.4926937 ]]

output_keypoints_input = []

def get_keypoints(output_keypoints):
  output_keypoints_input = output_keypoints


def compare(correctFrame, inputFrame):

  # calculate cosine similarity score for 6 keypoints (30FPS)
    
  result = 0
  for coord in range(5, 11):
    result += np.dot(correctFrame[coord][:2], inputFrame[coord][:2]) / (norm(correctFrame[coord][:2])*norm(inputFrame[coord][:2]))

  result /= 6

  return result


current_state = fr_0graden
result = 0
count = 0
for frame in output_keypoints_input:
  result = compare(current_state, frame)
  while result < 0.966:
    print("Wait for next state to see if frame is equal")
    result = compare(current_state, frame)
    count += 1 # kijken hoeveel keer dit fout mag zijn => ook max overschrijding van een beeld bekijken(niet meer dan tussen 0 en 30 graden, ....)
    # voor 0 en 30 = 0.995
    # voor 30 en 60 = 0.9987 => (te gelijk, zoek naar oplossing)
    # voor 60 en 90 = 0.9985
